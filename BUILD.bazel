load("@AvrToolchain//platforms/cpu_frequency:cpu_frequency.bzl", "cpu_frequency_flag")

cc_library(
    name = "ElasticNodeMiddlewareLib",
    srcs = [
        "src/elasticNodeMiddleware.c",
        "src/elasticNodeMiddleware_internal.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:ElasticNodeMiddlewareLibHdr",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "ElasticNodeMiddlewareLibTest",
    srcs = [
        "src/elasticNodeMiddleware.c",
        "src/elasticNodeMiddleware_internal.c",
    ],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//test:BitManipulationHdrForTesting",
        "//:ElasticNodeMiddlewareLibHdr",
    ],
)

cc_library(
    name = "Reconfigure_multibootLib",
    srcs = [
        "src/reconfigure_multiboot_avr.c",
        "src/reconfigure_multiboot_internal_avr.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:Reconfigure_MultibootLibHdr",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "Reconfigure_multibootLibTest",
    srcs = [
        "src/reconfigure_multiboot_avr.c",
        "src/reconfigure_multiboot_internal_avr.c",
    ],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:Reconfigure_MultibootLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "XMemLib",
    srcs = ["src/xmem.c"],
    hdrs = [
        "elasticnodemiddleware/xmem.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdrs",
        "//:XMemLibHdr",
        "@EmbeddedUtilities//:BitManipulation",
    ]
)

cc_library(
    name = "XMemLibTest",
    srcs = ["src/xmem.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:XMemLibHdr",
        "//test:BitManipulationHdrForTesting",
        "//:RegisterDefinitionLibHdrs"
    ],
)

cc_library(
    name = "Interrupt_ManagerLib",
    srcs = ["src/interruptManager_avr.c"],
    visibility = ["//visibility:public"],
    deps = ["//:Interrupt_ManagerLibHdr"],
)

cc_library(
    name = "Interrupt_ManagerLibTest",
    srcs = ["src/interruptManager_avr.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = ["//:Interrupt_ManagerLibHdr"],
)

cc_library(
    name = "BitmanipulationLib",
    visibility = ["//visibility:public"],
    deps = [
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "RegisterAbstractionLib",
    srcs = ["src/registerAbstraction.c"],
    visibility = ["//visibility:public"],
    deps = ["//:RegisterAbstractionLibHdr"],
)

exports_files(
    srcs = [
        "elasticnodemiddleware/elasticNodeMiddleware.h",
        "elasticnodemiddleware/elasticNodeMiddleware_internal.h",
        "elasticnodemiddleware/fpgaPins.h",
        "elasticnodemiddleware/fpgaRegisters.h",
        "elasticnodemiddleware/reconfigure_multiboot_avr.h",
        "elasticnodemiddleware/reconfigure_multiboot_internal_avr.h",
        "elasticnodemiddleware/registerAbstraction.h",
        "elasticnodemiddleware/xmem.h",
        "elasticnodemiddleware/interruptManager.h"
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "ElasticNodeMiddlewareLibHdr",
    hdrs = [
        "elasticnodemiddleware/elasticNodeMiddleware.h",
        "elasticnodemiddleware/elasticNodeMiddleware_internal.h",
        "elasticnodemiddleware/reconfigure_multiboot_avr.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdrs",
        "//:XMemLibHdr"
    ]
)

cc_library(
    name = "Reconfigure_MultibootLibHdr",
    hdrs = [
        "elasticnodemiddleware/elasticNodeMiddleware.h",
        "elasticnodemiddleware/reconfigure_multiboot_avr.h",
        "elasticnodemiddleware/reconfigure_multiboot_internal_avr.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdrs",
        "//:XMemLibHdr",
        "//:Interrupt_ManagerLibHdr",
        "//:RegisterAbstractionLibHdr"
    ]
)

cc_library(
    name = "XMemLibHdr",
    hdrs = [
        "elasticnodemiddleware/xmem.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdrs"
    ]
)


cc_library(
    name = "Interrupt_ManagerLibHdr",
    hdrs = ["elasticnodemiddleware/interruptManager.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "RegisterAbstractionLibHdr",
    hdrs = ["elasticnodemiddleware/registerAbstraction.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "RegisterDefinitionLibHdrs",
    hdrs= [
        "elasticnodemiddleware/fpgaRegisters.h",
        "elasticnodemiddleware/fpgaPins.h"
    ],
    visibility = ["//visibility:public"],
)