load("@AvrToolchain//platforms/cpu_frequency:cpu_frequency.bzl", "cpu_frequency_flag")

cc_library(
    name = "ElasticNodeMiddlewareLib",
    srcs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.c",
        "lib/elasticNodeMiddleware/elasticNodeMiddleware_internal.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdrs",
        "//:XMemLib",
        "//:ElasticNodeMiddlewareLibHdr",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "ElasticNodeMiddlewareLibTest",
    srcs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.c",
        "lib/elasticNodeMiddleware/elasticNodeMiddleware_internal.c",
    ],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//test:BitManipulationHdrForTesting",
        "//:ElasticNodeMiddlewareLibHdr",
    ],
)

cc_library(
    name = "Reconfigure_multibootLib",
    srcs = [
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.c",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdrs",
        "//:XMemLib",
        "//:Interrupt_ManagerLib",
        "//:Reconfigure_MultibootLibHdr",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "Reconfigure_multibootLibTest",
    srcs = [
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.c",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.c",
    ],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:Reconfigure_MultibootLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "XMemLib",
    srcs = ["lib/xmem/xmem.c"],
    hdrs = [
        "lib/xmem/xmem.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdrs",
        "//:XMemLibHdr",
        "@EmbeddedUtilities//:BitManipulation",
    ]
)

cc_library(
    name = "XMemLibTest",
    srcs = ["lib/xmem/xmem.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:XMemLibHdr",
        "//test:BitManipulationHdrForTesting",
        "//:RegisterDefinitionLibHdrs"
    ],
)

cc_library(
    name = "Interrupt_ManagerLib",
    srcs = ["lib/interruptManager/interruptManager_avr.c"],
    visibility = ["//visibility:public"],
    deps = ["//:Interrupt_ManagerLibHdr"],
)

cc_library(
    name = "Interrupt_ManagerLibTest",
    srcs = ["lib/interruptManager/interruptManager_avr.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = ["//:Interrupt_ManagerLibHdr"],
)

cc_library(
    name = "UartLib",
    srcs = ["lib/uart/uart.c"],
    visibility = ["//visibility:public"],
    deps = ["//:UartLibHdr"],
)

cc_library(
    name = "UartLibTest",
    srcs = ["lib/uart/uart.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = ["//:UartLibHdr"],
)

cc_library(
    name = "CircularBufferLib",
    srcs = ["lib/uart/circularBuffer/circularBuffer.c"],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLibHdr",
        "@EmbeddedUtilities//:BitManipulation",
        "//:Interrupt_ManagerLibHdr",
        "//:RegisterDefinitionLibHdrs",
        ],
)

cc_library(
    name = "CircularBufferLibTest",
    srcs = ["lib/uart/circularBuffer/circularBuffer.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLibHdr",
        "//test:BitManipulationHdrForTesting",
        "//:Interrupt_ManagerLibHdr",
        "//:RegisterDefinitionLibHdrs",
        ],
)

cc_library(
    name = "BitmanipulationLib",
    visibility = ["//visibility:public"],
    deps = [
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

exports_files(
    srcs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.h",
        "lib/elasticNodeMiddleware/elasticNodeMiddleware_internal.h",
        "lib/pinDefinition/fpgaPins.h",
        "lib/pinDefinition/fpgaRegisters.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.h",
        "lib/xmem/xmem.h",
        "lib/interruptManager/interruptManager.h",
        "lib/interruptManager/interruptManager_avr_Mock.h",
        "lib/uart/uart.h",
        "lib/uart/circularBuffer/circularBuffer.h"
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "ElasticNodeMiddlewareLibHdr",
    hdrs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.h",
        "lib/elasticNodeMiddleware/elasticNodeMiddleware_internal.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdrs",
        "//:XMemLibHdr",
        #"//:Reconfigure_MultibootLibHdr"
    ]
)

cc_library(
    name = "Reconfigure_MultibootLibHdr",
    hdrs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdrs",
        "//:XMemLibHdr",
        "//:Interrupt_ManagerLibHdr",
        #"//:ElasticNodeMiddlewareLibHdr"
    ]
)

cc_library(
    name = "XMemLibHdr",
    hdrs = ["lib/xmem/xmem.h" ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdrs"
    ]
)


cc_library(
    name = "Interrupt_ManagerLibHdr",
    hdrs = ["lib/interruptManager/interruptManager.h",
            "lib/interruptManager/interruptManager_avr_Mock.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "UartLibHdr",
    hdrs = ["lib/uart/uart.h",],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "CircularBufferLibHdr",
    hdrs = ["lib/uart/circularBuffer/circularBuffer.h",],
    visibility = ["//visibility:public"],
    deps = [
        "//:Interrupt_ManagerLibHdr",
    ]
)

cc_library(
    name = "RegisterDefinitionLibHdrs",
    hdrs= [
        "lib/pinDefinition/fpgaRegisters.h",
        "lib/pinDefinition/fpgaPins.h"
    ],
    visibility = ["//visibility:public"],
)