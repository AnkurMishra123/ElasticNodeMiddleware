load("@AvrToolchain//platforms/cpu_frequency:cpu_frequency.bzl", "cpu_frequency_flag")

cc_library(
    name = "ElasticNodeMiddlewareLib",
    srcs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.c",
        "lib/elasticNodeMiddleware/elasticNodeMiddleware_internal.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:ElasticNodeMiddlewareLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:XMemLib",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "ElasticNodeMiddlewareLibTest",
    srcs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.c",
        "lib/elasticNodeMiddleware/elasticNodeMiddleware_internal.c",
    ],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:ElasticNodeMiddlewareLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "ElasticNodeMiddleware_ConfigureFPGALib",
    srcs = [
        "lib/elasticNodeMiddleware/configure/elasticNodeMiddleware_configureFPGA.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:ElasticNodeMiddleware_ConfigureFPGALibHdr",
        "//:Reconfigure_multibootLib",
    ],
)

cc_library(
    name = "ElasticNodeMiddleware_ConfigureFPGALibTest",
    srcs = [
        "lib/elasticNodeMiddleware/configure/elasticNodeMiddleware_configureFPGA.c",
    ],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:ElasticNodeMiddleware_ConfigureFPGALibHdr",
    ],
)

cc_library(
    name = "Reconfigure_multibootLib",
    srcs = [
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.c",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:ElasticNodeMiddlewareLib",
        "//:Interrupt_ManagerLib",
        "//:Reconfigure_MultibootLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:XMemLib",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "Reconfigure_multibootLibTest",
    srcs = [
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.c",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.c",
    ],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:Reconfigure_MultibootLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "XMemLib",
    srcs = ["lib/xmem/xmem.c"],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdr",
        "//:XMemLibHdr",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "XMemLibTest",
    srcs = ["lib/xmem/xmem.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:XMemLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "Interrupt_ManagerLib",
    srcs = ["lib/interruptManager/interruptManager_avr.c"],
    visibility = ["//visibility:public"],
    deps = ["//:Interrupt_ManagerLibHdr"],
)

cc_library(
    name = "Interrupt_ManagerLibTest",
    srcs = ["lib/interruptManager/interruptManager_avr.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = ["//:Interrupt_ManagerLibHdr"],
)

cc_library(
    name = "UartLib",
    srcs = [
        "lib/uart/uart.c",
        "lib/uart/uart_internal.c",
    ],
    copts = [
        "-DF_CPU=8000000UL",
        "-DBAUD=9600UL",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLib",
        "//:Interrupt_ManagerLib",
        "//:RegisterDefinitionLibHdr",
        "//:UartLibHdr",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "UartLibTest",
    srcs = [
        "lib/uart/uart.c",
        "lib/uart/uart_internal.c",
    ],
    copts = [
        "-DTEST",
        "-DF_CPU=8000000UL",
        "-DBAUD=9600UL",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:UartLibHdr",
    ],
)

cc_library(
    name = "CircularBufferLib",
    srcs = ["lib/uart/circularBuffer/circularBuffer.c"],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLibHdr",
        "//:Interrupt_ManagerLib",
        "//:RegisterDefinitionLibHdr",
    ],
)

cc_library(
    name = "CircularBufferLibTest",
    srcs = ["lib/uart/circularBuffer/circularBuffer.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "BitmanipulationLib",
    visibility = ["//visibility:public"],
    deps = [
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

## new


cc_library(
    name = "ConfigurationLib",
    srcs = ["lib/configuration_new/configuration.c"],
    visibility = ["//visibility:public"],
    deps = [ "//:ConfigurationLibHdr",
             "//:BitmanipulationLib",
             "//:UartLib",
             "//:ElasticNodeMiddlewareLib",
             "//:FlashLib"],
)

cc_library(
    name = "FlashLib",
    srcs = ["lib/flash_new/flash.c"],
    visibility = ["//visibility:public"],
    deps = ["//:FlashLibHdr",
            "//:UartLib",
            "//:RegisterDefinitionLibHdr",
            "//:SpiLib",
            "//:FpgaFlashLib"],
)


cc_library(
    name = "FpgaFlashLib",
    srcs = ["lib/fpgaFlash_new/fpgaFlashSpi.c"],
    visibility = ["//visibility:public"],
    deps = ["//:FpgaFlashLibHdr",
            "//:SpiLib"],
)

cc_library(
    name = "FpgaFlashSelectLib",
    srcs = ["lib/fpgaFlash_new/fpgaFlashSpiSelect.c"],
    visibility = ["//visibility:public"],
    deps = ["//:FpgaFlashSelectLibHdr",
            "//:XMemLib",
            "//:RegisterDefinitionLibHdr",
            "//:Interrupt_ManagerLib"],
)

cc_library(
    name = "SpiLib",
    srcs = ["lib/spi_new/spi.c"],
    visibility = ["//visibility:public"],
    deps = ["//:SpiLibHdr",
            "//:Interrupt_ManagerLib",
            "//:RegisterDefinitionLibHdr",
            "//:XMemLib",
            "//:FpgaFlashSelectLib"],
)

cc_library(
    name = "UartManagerLib",
    srcs = ["lib/uartmanager/uartManager.c"],
    visibility = ["//visibility:public"],
    deps = ["//:UartManagerLibHdr",
            "//:ConfigurationLib",
            "//:UartLib"],
)

exports_files(
    srcs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.h",
        "lib/elasticNodeMiddleware/elasticNodeMiddleware_internal.h",
        "lib/interruptManager/interruptManager.h",
        "lib/interruptManager/interruptManager_avr_Mock.h",
        "lib/pinDefinition/fpgaPins.h",
        "lib/pinDefinition/fpgaRegisters.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.h",
        "lib/uart/circularBuffer/circularBuffer.h",
        "lib/uart/uart.h",
        "lib/uart/uart_internal.h",
        "lib/xmem/xmem.h",

        "lib/configuration_new/configuration.h",
        "lib/flash_new/flash.h",
        "lib/fpgaFlash_new/fpgaFlash.h",
        "lib/spi_new/spi.h",

        "lib/uartmanager/uartManager.h"
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "ElasticNodeMiddlewareLibHdr",
    hdrs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.h",
        "lib/elasticNodeMiddleware/elasticNodeMiddleware_internal.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdr",
        "//:XMemLibHdr",
    ],
)

cc_library(
    name = "ElasticNodeMiddleware_ConfigureFPGALibHdr",
    hdrs = [
        "lib/elasticNodeMiddleware/configure/elasticNodeMiddleware_configureFPGA.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:Reconfigure_MultibootLibHdr",
    ],
)

cc_library(
    name = "Reconfigure_MultibootLibHdr",
    hdrs = [
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:ElasticNodeMiddlewareLibHdr",
        "//:Interrupt_ManagerLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:XMemLibHdr",
    ],
)

cc_library(
    name = "XMemLibHdr",
    hdrs = ["lib/xmem/xmem.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdr",
    ],
)

cc_library(
    name = "Interrupt_ManagerLibHdr",
    hdrs = [
        "lib/interruptManager/interruptManager.h",
        "lib/interruptManager/interruptManager_avr_Mock.h",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "UartLibHdr",
    hdrs = [
        "lib/uart/uart.h",
        "lib/uart/uart_internal.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLibHdr",
        "//:Interrupt_ManagerLibHdr",
        "//:RegisterDefinitionLibHdr",
    ],
)

cc_library(
    name = "CircularBufferLibHdr",
    hdrs = ["lib/uart/circularBuffer/circularBuffer.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//:Interrupt_ManagerLibHdr",
        "//:RegisterDefinitionLibHdr",
    ],
)

cc_library(
    name = "RegisterDefinitionLibHdr",
    hdrs = [
        "lib/pinDefinition/fpgaPins.h",
        "lib/pinDefinition/fpgaRegisters.h",
    ],
    visibility = ["//visibility:public"],
)

## new


cc_library(
    name = "ConfigurationLibHdr",
    hdrs = [ "lib/configuration_new/configuration.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//:UartLibHdr",
        "//:ElasticNodeMiddlewareLibHdr",
        "//:FlashLibHdr"
    ]
)

cc_library(
    name = "FlashLibHdr",
    hdrs = ["lib/flash_new/flash.h"],
    visibility = ["//visibility:public"],
    deps = [
            "//:UartLibHdr",
            "//:RegisterDefinitionLibHdr",
            "//:SpiLibHdr",
            "//:FpgaFlashLibHdr"],
)

cc_library(
    name = "FpgaFlashLibHdr",
    hdrs = ["lib/fpgaFlash_new/fpgaFlash.h"],
    visibility = ["//visibility:public"],
    deps = ["//:SpiLibHdr"],
)

cc_library(
    name = "FpgaFlashSelectLibHdr",
    hdrs = ["lib/fpgaFlash_new/fpgaFlashSelect.h"],
    visibility = ["//visibility:public"],
    deps = [ "//:Interrupt_ManagerLibHdr",
             "//:XMemLibHdr",
             "//:RegisterDefinitionLibHdr"],
)
cc_library(
    name = "SpiLibHdr",
    hdrs = ["lib/spi_new/spi.h"],
    visibility = ["//visibility:public"],
    deps = ["//:Interrupt_ManagerLibHdr",
            "//:RegisterDefinitionLibHdr",
            "//:XMemLibHdr",
            "//:FpgaFlashSelectLibHdr"],
)

cc_library(
    name = "UartManagerLibHdr",
    hdrs = ["lib/uartmanager/uartManager.h"],
    visibility = ["//visibility:public"],
    deps = ["//:ConfigurationLibHdr",
            "//:UartLibHdr"],
)