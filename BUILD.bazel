load("@AvrToolchain//platforms/cpu_frequency:cpu_frequency.bzl", "cpu_frequency_flag")

cc_library(
    name = "ElasticNodeMiddlewareLib",
    srcs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.c",
        "lib/elasticNodeMiddleware/elasticNodeMiddleware_internal.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:ElasticNodeMiddlewareLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:XMemLibHdr",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "ElasticNodeMiddlewareLibTest",
    srcs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.c",
        "lib/elasticNodeMiddleware/elasticNodeMiddleware_internal.c",
    ],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:ElasticNodeMiddlewareLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "Reconfigure_multibootLib",
    srcs = [
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.c",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:Interrupt_ManagerLibHdr",
        "//:Reconfigure_MultibootLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:XMemLib",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "Reconfigure_multibootLibTest",
    srcs = [
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.c",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.c",
    ],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:Reconfigure_MultibootLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "XMemLib",
    srcs = ["lib/xmem/xmem.c"],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdr",
        "//:XMemLibHdr",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "XMemLibTest",
    srcs = ["lib/xmem/xmem.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:XMemLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "Interrupt_ManagerLib",
    srcs = ["lib/interruptManager/interruptManager_avr.c"],
    visibility = ["//visibility:public"],
    deps = ["//:Interrupt_ManagerLibHdr"],
)

cc_library(
    name = "Interrupt_ManagerLibTest",
    srcs = ["lib/interruptManager/interruptManager_avr.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = ["//:Interrupt_ManagerLibHdr"],
)

cc_library(
    name = "UartLib",
    srcs = [
        "lib/uart/uart.c",
        "lib/uart/uart_internal.c",
    ],
    copts = [
        "-DF_CPU=8000000UL",
        "-DBAUD=9600UL",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLib",
        "//:Interrupt_ManagerLibHdr",
        "//:RegisterDefinitionLibHdr",
        "//:UartLibHdr",
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

cc_library(
    name = "UartLibTest",
    srcs = [
        "lib/uart/uart.c",
        "lib/uart/uart_internal.c",
    ],
    copts = [
        "-DTEST",
        "-DF_CPU=8000000UL",
        "-DBAUD=9600UL",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:UartLibHdr",
    ],
)

cc_library(
    name = "CircularBufferLib",
    srcs = ["lib/uart/circularBuffer/circularBuffer.c"],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLibHdr",
        "//:Interrupt_ManagerLib",
        "//:RegisterDefinitionLibHdr",
    ],
)

cc_library(
    name = "CircularBufferLibTest",
    srcs = ["lib/uart/circularBuffer/circularBuffer.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLibHdr",
        "//test:BitManipulationHdrForTesting",
    ],
)

cc_library(
    name = "BitmanipulationLib",
    visibility = ["//visibility:public"],
    deps = [
        "@EmbeddedUtilities//:BitManipulation",
    ],
)

##### DYNAMIC MEMORY MANAGEMENT #####

cc_library(
    name = "Malloc_mwLib",
    srcs = ["lib/DynamicMemoryManagement/malloc_mw.c"],
    visibility = ["//visibility:public"],
    deps = [ "//:Malloc_mwLibHdr"
    ],
)

cc_library(
    name = "HeapsLib",
    srcs = ["lib/DynamicMemoryManagement/heaps.c"],
    visibility = ["//visibility:public"],
    deps = [ "//:HeapsLibHdr",
             "//:Malloc_mwLibHdr",
             "//:XMemLibHdr"],
)

cc_library(
    name = "Stack_depthLib",
    srcs = ["lib/DynamicMemoryManagement/stack_depth.c"],
    visibility = ["//visibility:public"],
    deps = [ "//:Stack_depthLibHdr",
             "//:UartLibHdr"],
)

cc_library(
    name = "InputManagementLib",
    srcs = ["lib/DynamicMemoryManagement/InputManagement.c"],
    visibility = ["//visibility:public"],
    deps = [ "//:Stack_depthLibHdr",
             "//:InputManagementLibHdr"],
)

cc_library(
    name = "InputManagementLibTest",
    srcs = ["lib/DynamicMemoryManagement/InputManagement.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = ["//:InputManagementLibHdr"],
)

cc_library(
    name = "TaskLib",
    srcs = ["lib/DynamicMemoryManagement/Task.c"],
    visibility = ["//visibility:public"],
    deps = [ "//:TaskLibHdr",
             "//:InputManagementLibHdr",
             "//:Stack_depthLibHdr",
             "//:MemoryManagementLibHdr"],
)

cc_library(
    name = "TaskLibTest",
    srcs = ["lib/DynamicMemoryManagement/Task.c"],
    copts = ["-DTEST"],
    visibility = ["//visibility:public"],
    deps = [ "//:TaskLibHdr"],
)

cc_library(
    name = "MemoryManagementLib",
    srcs = ["lib/DynamicMemoryManagement/MemoryManagement.c"],
    visibility = ["//visibility:public"],
    deps = [ "//:MemoryManagementLibHdr",
             "//:TaskLibHdr",
             "//:Stack_depthLibHdr"],
)

cc_library(
    name = "MemoryManagementLibTest",
    srcs = ["lib/DynamicMemoryManagement/MemoryManagement.c"],
    visibility = ["//visibility:public"],
    copts = ["-DTEST"],
    deps = [ "//:MemoryManagementLibHdr"]
)

exports_files(
    srcs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.h",
        "lib/elasticNodeMiddleware/elasticNodeMiddleware_internal.h",
        "lib/interruptManager/interruptManager.h",
        "lib/interruptManager/interruptManager_avr_Mock.h",
        "lib/pinDefinition/fpgaPins.h",
        "lib/pinDefinition/fpgaRegisters.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.h",
        "lib/uart/circularBuffer/circularBuffer.h",
        "lib/uart/uart.h",
        "lib/uart/uart_internal.h",
        "lib/xmem/xmem.h",
        #dynamic MM
        "lib/DynamicMemoryManagement/TaskGraphConfig.h",
        "lib/DynamicMemoryManagement/malloc_mw.h",
        "lib/DynamicMemoryManagement/heaps.h",
        "lib/DynamicMemoryManagement/stack_depth.h",
        "lib/DynamicMemoryManagement/InputManagement.h",
        "lib/DynamicMemoryManagement/Task.h",
        "lib/DynamicMemoryManagement/MemoryManagement.h"
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "ElasticNodeMiddlewareLibHdr",
    hdrs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.h",
        "lib/elasticNodeMiddleware/elasticNodeMiddleware_internal.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdr",
        "//:XMemLibHdr",
        #"//:Reconfigure_MultibootLibHdr"
    ],
)

cc_library(
    name = "Reconfigure_MultibootLibHdr",
    hdrs = [
        "lib/elasticNodeMiddleware/elasticNodeMiddleware.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_avr.h",
        "lib/reconfigure_multiboot_avr/reconfigure_multiboot_internal_avr.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdr",
        "//:XMemLibHdr",
        "//:Interrupt_ManagerLibHdr",
        #"//:ElasticNodeMiddlewareLibHdr"
    ],
)

cc_library(
    name = "XMemLibHdr",
    hdrs = ["lib/xmem/xmem.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//:RegisterDefinitionLibHdr",
    ],
)

cc_library(
    name = "Interrupt_ManagerLibHdr",
    hdrs = [
        "lib/interruptManager/interruptManager.h",
        "lib/interruptManager/interruptManager_avr_Mock.h",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "UartLibHdr",
    hdrs = [
        "lib/uart/uart.h",
        "lib/uart/uart_internal.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//:CircularBufferLibHdr",
        "//:Interrupt_ManagerLibHdr",
        "//:RegisterDefinitionLibHdr",
    ],
)

cc_library(
    name = "CircularBufferLibHdr",
    hdrs = ["lib/uart/circularBuffer/circularBuffer.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//:Interrupt_ManagerLibHdr",
        "//:RegisterDefinitionLibHdr"
    ],
)

cc_library(
    name = "RegisterDefinitionLibHdr",
    hdrs = [
        "lib/pinDefinition/fpgaPins.h",
        "lib/pinDefinition/fpgaRegisters.h",
    ],
    visibility = ["//visibility:public"],
)

##### Dynamic Memory Management #####

cc_library(
    name = "TaskGraphConfigLibHdr",
    hdrs = ["lib/DynamicMemoryManagement/TaskGraphConfig.h"],
    visibility = ["//visibility:public"],
    deps = [],
)

cc_library(
    name = "Malloc_mwLibHdr",
    hdrs = ["lib/DynamicMemoryManagement/malloc_mw.h"],
    visibility = ["//visibility:public"],
    deps = [],
)


cc_library(
    name = "HeapsLibHdr",
    hdrs = ["lib/DynamicMemoryManagement/heaps.h"],
    visibility = ["//visibility:public"],
    deps = [ "//:Malloc_mwLibHdr",
             "//:XMemLibHdr"],
)


cc_library(
    name = "Stack_depthLibHdr",
    hdrs = ["lib/DynamicMemoryManagement/stack_depth.h"],
    visibility = ["//visibility:public"],
    deps = [ "//:UartLibHdr"],
)

cc_library(
    name = "InputManagementLibHdr",
    hdrs = ["lib/DynamicMemoryManagement/InputManagement.h"],
    visibility = ["//visibility:public"],
    deps = [ "//:Stack_depthLibHdr"],
)

cc_library(
    name = "TaskLibHdr",
    hdrs = ["lib/DynamicMemoryManagement/Task.h",
            "lib/DynamicMemoryManagement/MemoryManagement.h"],
    visibility = ["//visibility:public"],
    deps = [ "//:InputManagementLib",
             "//:Stack_depthLibHdr",
             #"//:MemoryManagementLibHdr"
             ],
)

cc_library(
    name = "MemoryManagementLibHdr",
    hdrs = ["lib/DynamicMemoryManagement/MemoryManagement.h",
            "lib/DynamicMemoryManagement/Task.h"],
    visibility = ["//visibility:public"],
    deps = [ #"//:TaskLibHdr",
             "//:Stack_depthLibHdr",
             #InputManager in Task
             "//:InputManagementLibHdr"],
)